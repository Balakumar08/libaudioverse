[[overview]]
== Overview

This section tries to get you started with Libaudioverse quickly and to show you all the thinngs Libaudioverse can do.
<<technical,a high-level technical overview>> can be found further along in this manual, but this section is probably what you actually want when you're starting.

=== Playing a Sine Wave

The following is the simplest Libaudioverse program that does something, namely output a sine wave for 5 seconds.
A full explanation follows.

....
import libaudioverse
import time

libaudioverse.initialize()

#Create a simulation using the defaults.
simulation = libaudioverse.Simulation()

#A sine node synthesizes a sine wave:
sine = libaudioverse.SineNode(simulation)

#In order to output, we connect to the simulation.
sine.connect_simulation(output = 0)

#The simulation will play once it has been told to use a specific output device.
simulation.set_output_device(-1)

time.sleep(5.0)
libaudioverse.shutdown()
....


=== Sweeping Sine Waves with properties

....
#Recall that Python omits the last value.
for i in xrange(0, 1010, 10):
    sine.mul.value = i/1000.0
    sine.frequency.value = i
    time.sleep(0.02)
....

=== Buffers and Playing Files

The following loops a file until enter is pressed.

....
import libaudioverse

libaudioverse.initialize()

simulation = libaudioverse.Simulation()

print "Enter a path to a sound file."
path = raw_input()

buffer=libaudioverse.Buffer(simulation)
buffer.load_from_file(path)
buffer_player=libaudioverse.BufferNode(simulation)
buffer_player.buffer.value = buffer
buffer_player.looping.value = True

#Connect the buffer.
buffer_player.connect_simulation(0)

#The simulation will play once it has been told to use a specific output device.
simulation.set_output_device(-1)

print "Press enter to exit."
raw_input()
libaudioverse.shutdown()
....

=== Panning

....
panner=libaudioverse.AmplitudePannerNode(simulation)
buffer_player.connect(output = 0, node = panner, input = 0)
panner.connect_simulation(0)
....

=== HRTf and the Multipanner

....
panner=libaudioverse.MultipannerNode(simulation, hrtf_path ="default")
buffer_player.connect(output = 0, node = panner, input = 0)
panner.connect_simulation(0)
....

Multipanners have the same properties as all other panners.
The addition is the `strategy` property, which must be set to one of the members of the `Lav_PANNING_STRATEGIES` enumeration.
In languages with classes, like Python, enumerations are mapped to a class with attributes; `Lav_PANNING_STRATEGIES` becomes `PanningStrategies`.
For example, the following line configures HRTF:

....
panner.strategy =panningStrategies.hrtf
....

And the following 5.1 surround sound:

....
panner.strategy=PanningStrategies.surround51
....

Libaudioverse also features HRTF support.
At the lowest level, this is accessed through the HRTF node.
In almost all cases, however, a multipanner should be used instead.

The `hrtf_path` argument is the path of an HRTF file in a format specific to Libaudioverse.
Making your own is both unnecessary and very advanced.

As a special case, anywhere that Libaudioverse expects a path to an HRTF file, it will also allow the special string `default`.
This is an indicator that Libaudioverse should load from an internal HRTF and is usually what you want.
If you are using `default`, there are no additional files to distribute.
This HRTF is built directly into the Libaudioverse DLL itself.


HRTFs work at any sampling rate, but the experience is suboptimal if the sampling rate of the simulation does not match the sampling rate of the HRTF dataset in use.
The default dataset has a sampling rate of 44100 HZ.
As a quite intensional design decision, the default arguments when constructing simulations also specify this sampling rate.
To that end, `simulation = libaudioverse.simulation()` or your language's analog is sufficient to use the default dataset.

=== Higher-level 3D components

