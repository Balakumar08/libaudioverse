[[technical]]
== Technical Description Of Libaudioverse

This section of the manual describes Libaudioverse from a high-level perspective and provides technical details required to optimize and troubleshoot your application.
For a gentler and much more hands-on introduction, see the <<overview,overview>>.

[[technical-introduction]]
=== Introduction

Libaudioverse is composed primarily of three object types: <<technical-server,the server>>, <<technical-buffers,buffers>>, and <<technical-nodes,nodes>>.

The server is the main entry point, and is required for creating any other Libaudioverse object.
All objects save for servers are themselves associated with servers.
Attempts to combine objects from different servers are always errors.

Buffers represent chunks of decoded audio data, and can be loaded from a variety of sources.
Buffers commonly hold data from files and are usually combined with a <<node-Lav_OBJTYPE_BUFFER_NODE,buffer node>> for playback.

Finally, nodes represent audio production, analysis, and transformation.
They are by far the most complex and interesting object type in Libaudioverse.

[[technical-initialization]]
=== Initialization

Before using Libaudioverse, call <<function-Lav_initialize,Lav_initialize>>.
Failure to do so will result in crashes.
When done using the library, call <<function-Lav_shutdown,Lav_shutdown>>.
Failure to do so may lead to crashes, depending on what is or is not created.
It is not safe to assume that Libaudioverse will properly clean itself up at process exit without a call to <<function-Lav_shutdown,Lav_shutdown>>, though failing to do so is common in exploratory situations for languages which provide a REPL.

You may initialize the library more than once: subsequent initializations do nothing.
You must deinitialize the library exactly as many times as it has been initialized, no more.

[[tecchnical-object_lifetime]]
=== Pointer Ownership and Object Lifetime

==== A Note for Users of Languages with Automatic Memory Management

The following sections are very complicated, but languages whichcan be integrated with Libaudioverse's freeing logic handle all of it for you.
Unless you are in C or another language where you must manually manage memory, all you need to know is that the following are strong references:

- Given some node `a` and some other node `b`, the call `a.connect(some_output, b, some_input)` creates a strong reference from `b` to `a`.  The connection remains alive until `b` is collected or you explicitly kill it.

- Connecting to properties creates a strong reference in the same manner as above.  So does connecting to the server.

- The  server is alive as long as something created from it is alive.

Finally, deinitialization of the library kills all the objects on the library's side.
You should never use anything after deinitializing the library.

Everything related to pointer ownership and keeping pointers alive is handled deep inside the bindings to such languages.
You need not concern yourself with it.
Any language with concerns along these lines will clearly mention them in the documentation for that language.

==== Pointer Ownership

When Libaudioverse returns a buffer of memory, it almost always allocates a copy.
Exceptions to this rule will be clearly documented.

The calling application is responsible for freeing this buffer, always through <<function-Lav_free,Lav_free>>.
Use of `free` from the standard library on these pointers will cause memory leaks at best.

When <<function-Lav_shutdown,Lav_shutdown>> is called, all pointers that libaudioverse allocated are immediately freed.
Calling this function after the library is deinitialized does nothing.

==== Object Lifetime

Libaudioverse objects ar publicly exposed through reference-counted handles.
There are three functions dealing with handle management: <<function-Lav_handleIncRef,Lav_handleIncRef>>, <<function-Lav_handleDecRef,Lav_handleDecRef>>, and <<function-Lav_handleGetAndClearFirstAccess,Lav_handleGetAndClearFirstAccess>>.
As above, calling these functions after library shutdown does nothing.

In order to be as fast as possible and to block as little as possible, Libaudioverse defers deletions to the end of the current block.
This means that any pending callbacks for a deleted handle may still fire, depending on when and how they were called.
Even if you think a handle should no longer exist, you should be prepared to see it again.

In order to be sane and avoid crashes, Libaudioverse creates strong references internally.
Examples include connections (from the input of the target to the output of the source) and setting buffer properties.
The rest of this section explains how this logic works.

A handle is either external or internal.
Handles are external if and only if their reference count is greater than or equal to 1.
The most common method of getting an external handle is to create an object.
When a handle first transitions from the internal to external state, its reference count is always set to one.
The function <<function-Lav_handleGetAndClearFirstAccess>> indicates whether a handle has just transitioned from the internal to external states, clearing an internal flag.
This function exists primarily to assist bindings in knowing when they need to increment the handle's reference count.
When a handle's reference count goes to 0, it is not immediately deleted but instead becomes internal once more.

Relationships between Libaudioverse objects will also keep handles alive by forming invisible and internal strong references.
The following are the common cases in which this occurs:

- A server is alive so long as any object created using the server is still alive.

- A node is alive so long as it has an output connected to another node that is also still alive.

- Buffers are alive as long as they are assigned to a buffer property, or otherwise in use.

In order to detect the death of a handle, Libaudioverse provides the <<function-Lav_setHandleDestroyedCallback>> function.
Handle values are not reused unless the application manages to overflow a 32-bit signed integer.
Most bindings therefore use the proxy pattern: the objects that user code deals with are thin proxies containing the handle and a pointer to global state.
When the handle destroyed callback is called, the global state is then destroyed.
This allows for keeping callback objects and other such resources alive in languages with garbage collectors, as not to invalidate pointers held by Libaudioverse.
The handle destroyed callback must do its best to not block whenever possible, as it may be called from any thread.

[[technical-server]]
=== The Server

The server is the main entry point to Libaudioverse.

The two most crutial pieces of information needed for the server are the block size and sample rate.
The latter is self-explanatory.
The block size is the number of samples to process at once, and must be a multiple of 4.
Servers are created with <<function-Lav_createServer>>.
The strongly suggested defaults for these parameters are 1024 and 44100 respectively.
These are sufficient and performant for most applications.

By default, Libaudioverse will use one thread per core on the current system for audio mixing.
This may be changed via <<function-Lav_serverSetThreads>>.

Servers handle audio output and hold state, provided via dependency injection to created objects.
All Libaudioverse objects are associated with exactly one server in a permanent manner.
Any attempt to use a pair of objjects from different servers together will error.

[[technical-audio_output]]
==== Audio Output

Servers are the final destination for audio, and output may be retrieved in 3 ways.
In all cases, Libaudioverse applies the audio upmixing and downmixing algorithms as specified <<technical-connections,here>> to reach the required channel count.
None of the following three methods of receiving audio should be mixed; doing so results in undefined behavior.

<<function-Lav_serverGetBlock>>  fills a buffer allocated by the calling application with a block of audio data.

<<function-Lav_serverWriteFile>> drives the server for the specified duration, synthesizing as fast as possible and writing to the specified file.
The file format is determined from the extension of the provided path.
The supported file formats are not currently documented as this is in flux, but you are guaranteed to have at least .wav and .ogg.

The final option is to call <<function-Lav_serverSetOutputDevice>>.
This links the server to a specific audio device.

Libaudioverse represents specific audio devices with string identifiers.
These strings should be considered opaque.  They should never be stored.
In future, Libaudioverse will make a best effort to allow you to put them in configuration files, but this functionality is not currently implemented.
The format of these strings is subject to change.

The default audio device is the string "default".
Where it can, Libaudioverse will attempt to follow any changes in the default audio device.

Multiple calls to <<function-Lav_serverSetOutputDevice>> are allowed, though playback may not be gapless.

IMPORTANT: Audio stacks are limited.
There is no reliable way to properly detect channel counts for all setups.
For this reason, your application should assume that it is running on a set of stereo speakers (2 channels, don't apply HRTFs) until the user specifies otherwise.
If you use the wrong channel count, Libaudioverse will apply the remixing algorithms but the experience will be sub-par.
Always trust the user; if it is important for your application to know if it is running on surround sound, ask or direct users to an options menu before choosing on their behalf.

[[technical-atomicity]]
==== Atomicity and Batching Calls

Libaudioverse outputs audio in blocks.
When outputting to an audio device, any operation which may be completed with one function call will either be completely audible or not audible on the next block.
If the operation in question can be done in one function call, hearing partial results is not possible.

There are three ways to ensure that operations which take more than one function call are only audible when finished:

- Perform the operations on a set of disconnected nodes before connecting them.

- use <<function-Lav_serverLock>> and <<function-Lav_serverUnlock>>.  Note that, as these function names imply, servers function as mutexes; lock inversion and other concerns can apply in multithreaded scenarios.

- Set a per-block callback which Libaudioverse will call just before mixing every block.  This can be done with <<function-Lav_serverSetBlockCallback>>.

Most applications will want to use <<function-Lav_serverLock>> before beginning their per-frame audio update, and <<function-Lav_serverUnlock>> afterwords.
Failure to call <<function-Lav_serverUnlock>> in a timely manner will cause audio glitching; failure to call it at all will cause silence and freeze Libaudioverse's background threads.

The per-block callback is for advanced synthesis applications which need a stronger guarantee: not only is the operation happening completely before the next block, it is running every block.
Using the per-block callback for a game's frame updates will lead to massively degraded performance.
You should only use it when controlling nodes exactly every block is important.

[[technical-buffers]]
=== Buffers

Buffers store un-encoded float32 audio data at the sampling rate of the server.
They can be loaded from files or arrays, and will resample the data exactly once when loaded.
Buffers are most commonly used  with <<node-Lav_OBJTYPE_BUFFER_NODE,buffer nodes>>.

Save for the contained audio data, buffers are stateless; using them requires coupling them with a node.
Since buffers are quite large, using a cache is recommended.
Buffers may safely be used in more than one place at a time.
Modifying a buffer's audio data while it is in use will result in an error.

[[technical-nodes]]
=== Nodes

Nodes represent audio transformation, genneration, and analysis.
This section discusses nodes generally, including the audio conversion algorithms, properties, and connection logic,.
To see what kinds of specific nodes are on offer, see the <<nodes,Nodes reference>>.

[[technical-connections]]
==== Connections and Automatic Audio Channel Count Conversion

Nodes have 0 or more inputs and 0 or more outputs.
Outputs are connected to inputs in a many-to-many relationship, such that each input acts as a mixer.
Libaudioverse makes the opinionated decision that connections are made from outputs to inputs and broken in the same manner.

The two functions relevant to node-to-node connections are <<function-Lav_nodeConnect>> and <<function-Lav_nodeDisconnect>>.
Connecting nodes to the server is accomplished with <<function-Lav_nodeConnectServer>>.
<<function-Lav_nodeConnectProperty>> will be discussed later.
In languages with function overloading or sufficient flexibility to fake it, these three functions are often combined into one.
Any connection that would cause a cycle (i.e. `a.connect(0, b, 0)` and `b.connect(0, a, 0)` in Python) will error.

All inputs and outputs have a documented channel count.
Libaudioverse has intrinsic understanding of the following channel counts, and can freely and automatically convert between them:

|===
| Count | Name | Order
| 1 | Mono | Mono
| 2 | Stereo | Left, Right
| 4 | 4.0 Surround (quad) | front left, front right, back left, back right
| 6 | 5.1 surround | front left, front right, center, lfe, back left, back right
| 8 | 7.1 Surround | front left, front right, center, lfe, back left, back right, side left, side right
|===

Where applicable, libaudioverse prefers to copy WebAudio's conversion algorithms.
This is used for everything save conversions involving 7.1.
Regretfully, the WebAudio specification does not specify what to do in this case.
To that end, Libaudioverse uses a custom algorithm that is subject to change.

If an input or an output has a channel count not found in the above table, then one of three things happens:

- If the output is mono, then the mono output fills all channels of the input.

- If the output has less channels than the input, additional channels are filled with zero.

- If the output has more channels than the input, additional channels are dropped.

Conceptually, nodes have a time that is specific to each node.
This time does not actually exist and cannot be queried, but makes a good metaphorical mechanism for understanding how nodes advance.
You can observe it somewhat directly by looking at the position property on a buffer node.

If the node's state is paused, time does not advance for it under any circumstance, and it simply always outputs zero.
Time advances for a node if one of the following two conditions is true:

- You can grab one or more of the node's outputs and somehow follow them via any path whatsoever through nodes which are playing or always playing to the server.

- The node's state is always playing.

If some node `a` has a connection to some node `b` from an output of `a` to an input of `b` then `a` will always execute before `b`.
In addition, any callbacks that happen in the audio thread on `a` will happen before any such on `b`.

[[technical-properties]]
==== Properties 

Properties control aspects of nodes in the manner that their name suggests.
They are managed through a variety of functions depending on the property type, i.e. <<function-Lav_nodeSetIntProperty>>.

The full list of property management functions is too long to be listed here, but they all follow a similar naming pattern.
`Lav_nodeSetTypeProperty` and `Lav_nodeGetTypeProperty`, where `Type` is the property's type, are the most important.

Properties are always of one of the following types:
int (32-bit signed integer), float, double, float3, float6, string, array of int, array of float, or buffer.

Boolean properties are int properties with the range 0 to 1, and are used as int properties in the C bindings.
They exist for bindings generation and documentation clarity.

Some int properties must take their values from an enum.
When this is the case, which enum is documented with the property.

Float3 and float6 properties are packed vectors primarily used for the 3D components.
The purpose of float3 and float6 properties are to provide a fast path for orientations and positions, and to reduce need for <<function-Lav_serverLock>> and <<function-Lav_serverUnlock>> with the 3D components of this library.

There are three standard properties on all nodes.  They are as follows, with more complete documentation <<node-Lav_OBJTYPE_GENERIC_NODE,here>>:

- `State`. An int. This property takes its value from the <<enum-Lav_NODE_STATES>> enumeration.
Nodes which are playing are used as-needed.
Nodes which are paused act as though they are always outputting zeros.
Nodes which are always playing always process, even if no one needs their output.
The default is playing.

- `Mul`. A float.  This is a multiplier (naively volume) which is applied to the node's outputs before `add`.

- `Add`. A float.  This is an additional additive factor (DC offset) applied to the outputs of the node after the application of `mul`.

[[technical-automation]]
==== Automation and Property Connections

While all other types of properties are exactly the value they are currently set to, float and double properties have two additional features which allow for fine-grained control.
The value of a float or double property is actually a sum of all of the following:

- The set value, if no automators are currently effecting the property.

- The automation value, computed by looking at the automation timeline.

- The value of the property's input.

These will be discussed here.

First is the set value.  This is fairly self-explanatory: call `Lav_nodeSetFloatProperty`.

Second is the automation timeline.
Automators include such things as <<function-Lav_automationLinearRampToValue,Lav_automationLinearRampToValue>> and <<function-Lav_automationEnvelope,Lav_automationEnvelope>>.
When in use, the automation timeline takes the place of the set value; note that setting the property explicitly will cancel all automators.

Only one automator can be in effect at any given time.
They have both a duration and a starting point.
Automators such as the envelope have a non-zero duration, and will move the value of the property appropriately as described by the provided array.
Other automators such as linear ramps have a duration of zero and affect the property starting when the previous automator ends.

Attempting to schedule an automator during the duration of another automator (or such that they start at the same exact time for those automators which have a duration of zero) is an error.

Finally, every float and double property can be treated as a mono input via the function <<function-Lav_nodeConnectProperty>>.
The value of all connected nodes is converted and summed, and then acts as an additional additive factor.

Proper use of these features includes understanding k-rate versus a-rate properties, terms borrowed from csound.
A k-rate property has it's value read at the beginning of every block, while an a-rate property has it's value read more often.
Usually a-rate properties are read every sample, but this is not a guarantee;
if an a-rate property is read less often, this will be documented in the description.

[[technical-callbacks]]
==== Callbacks

Some nodes have callbacks, which work exactly as the name suggests.

What needs to be mentioned about callbacks that makes them deserve a section is this: they can be called in two places, and which place will always be documented.

Any callback which does not explicitly specify that it is called outside the audio thread is allowed to run in the audio thread.
These callbacks should consequently not have the Libaudioverse API used from it.
If the Libaudioverse API can be used from such a callback, then the specific parts of the API that should be used will be outlined.
Using the Libaudioverse API in an incorrect manner from a callback which is called inside the audio thread will lead to undefined behavior.
Said undefined behavior will be well down the road to outright crashing.

The other place that callbacks can be called is on a background thread owned by the server.
This will be clearly documented.
This thread is created even if you opt to use `Lav_serverGetBlock`.
In this case, using the Libaudioverse API is safe.

Blocking in a callback is usually a bad idea.
If the callback is running in the audio threads, blocking will decrease performance and cause Libaudioverse to begin adjusting the latency upward.
In extreme cases, blocking in the audio threads will cause glitching.
Blocking inside callbacks which are not in the audio threads will stop further callbacks from executing, but will otherwise not degrade performance immediately.
It should be noted that Libaudioverse sometimes uses the thread on which these callbacks run internally, and that blocking the callback queue may cause resources to build up over time.

No guarantee is made that only one callback will execute at a time.
All callbacks should be fully threadsafe.
