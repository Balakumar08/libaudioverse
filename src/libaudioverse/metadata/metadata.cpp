/**Copyright (C) Austin Hicks, 2014
This file is part of Libaudioverse, a library for 3D and environmental audio simulation, and is released under the terms of the Gnu General Public License Version 3 or (at your option) any later version.
A copy of the GPL, as well as other important copyright and licensing information, may be found in the file 'LICENSE' in the root of the Libaudioverse repository.  Should this file be missing or unavailable to you, see <http://www.gnu.org/licenses/>.*/

/**Warning: This file is autogenerated from metadata.t, metadata.py, and metadata.y.  Modify those files to change this one, and do not edit this directly.*/

#include <libaudioverse/libaudioverse.h>
#include <libaudioverse/libaudioverse_properties.h>
#include <libaudioverse/libaudioverse3d.h>
#include <libaudioverse/private_properties.hpp>
#include <libaudioverse/private_callbacks.hpp>
#include <libaudioverse/private_metadata.hpp>
#include <limits>
#include <tuple>
#include <map>
#include <string>
#include <set>

//these three macros make ranges work.
#ifdef INFINITY
#undef INFINITY
#endif
#ifdef MIN_INT
#undef MIN_INT
#endif
#ifdef MAX_INTE
#undef MAX_INT
#endif

#define INFINITY (std::numeric_limits<float>::infinity())
#define MIN_INT (std::numeric_limits{int>::min())
#define MAX_INT (std::numeric_limits<int>::max())

//We're intensionally avoiding any ambiguity with static constructors by allocating these at library initialization.
//we're also leaning heavily on the default copy constructor of properties, which is safe for the moment.
std::map<std::tuple<int, int>, LavProperty> *default_property_instances = nullptr;
std::map<int, std::set<int>> *properties_by_object_type;

//exactly the same thing for callbacks.
std::map<std::tuple<int, int>, LavCallback> *default_callback_instances = nullptr;
std::map<int, std::set<int>> *callbacks_by_object_type = nullptr;

void initializeMetadata() {
	properties_by_object_type = new std::map<int, std::set<int>>();
	default_property_instances = new std::map<std::tuple<int, int>, LavProperty>();
	callbacks_by_object_type = new std::map<int, std::set<int>>();
	default_callback_instances = new std::map<std::tuple<int, int>, LavCallback>();
	LavProperty* tempProp= nullptr; //a temporary that we use a bunch of times.
	LavCallback *tempcall = nullptr; //similarly for callbacks.
	
	//frequency on Lav_OBJTYPE_SINE
	{
	tempProp = createFloatProperty("frequency", 440.0f, 0.0f, INFINITY);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_SINE, Lav_SINE_FREQUENCY)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_SINE].insert(Lav_SINE_FREQUENCY);
	}
	
	//suspended on Lav_OBJTYPE_SINE
	{
	tempProp = createIntProperty("suspended", 0, 0, 1);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_SINE, Lav_OBJECT_SUSPENDED)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_SINE].insert(Lav_OBJECT_SUSPENDED);
	}
	
	//suspended on Lav_OBJTYPE_GENERIC
	{
	tempProp = createIntProperty("suspended", 0, 0, 1);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_GENERIC, Lav_OBJECT_SUSPENDED)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_GENERIC].insert(Lav_OBJECT_SUSPENDED);
	}
	
	//max_parents on Lav_OBJTYPE_MIXER
	{
	tempProp = createIntProperty("max_parents", 0, 0, MAX_INT);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_MIXER, Lav_MIXER_MAX_PARENTS)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_MIXER].insert(Lav_MIXER_MAX_PARENTS);
	}
	
	//inputs_per_parent on Lav_OBJTYPE_MIXER
	{
	tempProp = createIntProperty("inputs_per_parent", 0, 0, 0);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_MIXER, Lav_MIXER_INPUTS_PER_PARENT)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_MIXER].insert(Lav_MIXER_INPUTS_PER_PARENT);
	}
	
	//suspended on Lav_OBJTYPE_MIXER
	{
	tempProp = createIntProperty("suspended", 0, 0, 1);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_MIXER, Lav_OBJECT_SUSPENDED)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_MIXER].insert(Lav_OBJECT_SUSPENDED);
	}
	
	//orientation on Lav_OBJTYPE_WORLD
	{
	float default[] = {0.0f, 0.0f, -1.0f, 0.0f, 1.0f, 0.0f};
	tempProp = createFloat6Property("orientation", default);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_WORLD, Lav_3D_ORIENTATION)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_WORLD].insert(Lav_3D_ORIENTATION);
	}
	
	//position on Lav_OBJTYPE_WORLD
	{
	float default[] = {0.0f, 0.0f, 0.0f};
	tempProp = createFloat3Property("position", default);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_WORLD, Lav_3D_POSITION)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_WORLD].insert(Lav_3D_POSITION);
	}
	
	//suspended on Lav_OBJTYPE_WORLD
	{
	tempProp = createIntProperty("suspended", 0, 0, 1);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_WORLD, Lav_OBJECT_SUSPENDED)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_WORLD].insert(Lav_OBJECT_SUSPENDED);
	}
	
	//azimuth on Lav_OBJTYPE_HRTF
	{
	tempProp = createFloatProperty("azimuth", 0.0f, -INFINITY, INFINITY);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_HRTF, Lav_PANNER_AZIMUTH)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_HRTF].insert(Lav_PANNER_AZIMUTH);
	}
	
	//elevation on Lav_OBJTYPE_HRTF
	{
	tempProp = createFloatProperty("elevation", 0.0f, -90.0f, 90.0f);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_HRTF, Lav_PANNER_ELEVATION)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_HRTF].insert(Lav_PANNER_ELEVATION);
	}
	
	//suspended on Lav_OBJTYPE_HRTF
	{
	tempProp = createIntProperty("suspended", 0, 0, 1);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_HRTF, Lav_OBJECT_SUSPENDED)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_HRTF].insert(Lav_OBJECT_SUSPENDED);
	}
	
	//looping on Lav_OBJTYPE_FILE
	{
	tempProp = createIntProperty("looping", 0, 0, 1);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_FILE, Lav_FILE_LOOPING)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_FILE].insert(Lav_FILE_LOOPING);
	}
	
	//position on Lav_OBJTYPE_FILE
	{
	tempProp = createDoubleProperty("position", 0.0, 0.0, 0.0);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_FILE, Lav_FILE_POSITION)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_FILE].insert(Lav_FILE_POSITION);
	}
	
	//pitch_bend on Lav_OBJTYPE_FILE
	{
	tempProp = createFloatProperty("pitch_bend", 1.0f, 0.0f, INFINITY);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_FILE, Lav_FILE_PITCH_BEND)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_FILE].insert(Lav_FILE_PITCH_BEND);
	}
	
	//suspended on Lav_OBJTYPE_FILE
	{
	tempProp = createIntProperty("suspended", 0, 0, 1);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_FILE, Lav_OBJECT_SUSPENDED)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_FILE].insert(Lav_OBJECT_SUSPENDED);
	}
	
	//suspended on Lav_OBJTYPE_HARD_LIMITER
	{
	tempProp = createIntProperty("suspended", 0, 0, 1);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_HARD_LIMITER, Lav_OBJECT_SUSPENDED)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_HARD_LIMITER].insert(Lav_OBJECT_SUSPENDED);
	}
	
	//azimuth on Lav_OBJTYPE_AMPLITUDE_PANNER
	{
	tempProp = createFloatProperty("azimuth", 0.0f, -INFINITY, INFINITY);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_AMPLITUDE_PANNER, Lav_PANNER_AZIMUTH)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_AMPLITUDE_PANNER].insert(Lav_PANNER_AZIMUTH);
	}
	
	//elevation on Lav_OBJTYPE_AMPLITUDE_PANNER
	{
	tempProp = createFloatProperty("elevation", 0.0f, -90.0f, 90.0f);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_AMPLITUDE_PANNER, Lav_PANNER_ELEVATION)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_AMPLITUDE_PANNER].insert(Lav_PANNER_ELEVATION);
	}
	
	//channel_map on Lav_OBJTYPE_AMPLITUDE_PANNER
	{
	
	unsigned int minLength = 2;
	unsigned int maxLength = MAX_INT;
	unsigned int defaultLength = 2;
	
	float defaultData[] = {-90.0f, 90.0f};
	tempProp = createFloatArrayProperty("channel_map", minLength, maxLength, defaultLength, defaultData);
	
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_AMPLITUDE_PANNER, Lav_PANNER_CHANNEL_MAP)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_AMPLITUDE_PANNER].insert(Lav_PANNER_CHANNEL_MAP);
	}
	
	//suspended on Lav_OBJTYPE_AMPLITUDE_PANNER
	{
	tempProp = createIntProperty("suspended", 0, 0, 1);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_AMPLITUDE_PANNER, Lav_OBJECT_SUSPENDED)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_AMPLITUDE_PANNER].insert(Lav_OBJECT_SUSPENDED);
	}
	
	//multiplier on Lav_OBJTYPE_ATTENUATOR
	{
	tempProp = createFloatProperty("multiplier", 1.0f, 0.0f, INFINITY);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_ATTENUATOR, Lav_ATTENUATOR_MULTIPLIER)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_ATTENUATOR].insert(Lav_ATTENUATOR_MULTIPLIER);
	}
	
	//suspended on Lav_OBJTYPE_ATTENUATOR
	{
	tempProp = createIntProperty("suspended", 0, 0, 1);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_ATTENUATOR, Lav_OBJECT_SUSPENDED)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_ATTENUATOR].insert(Lav_OBJECT_SUSPENDED);
	}
	
	//orientation on Lav_OBJTYPE_SOURCE
	{
	float default[] = {0.0f, 0.0f, -1.0f, 0.0f, 1.0f, 0.0f};
	tempProp = createFloat6Property("orientation", default);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_SOURCE, Lav_3D_ORIENTATION)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_SOURCE].insert(Lav_3D_ORIENTATION);
	}
	
	//position on Lav_OBJTYPE_SOURCE
	{
	float default[] = {0.0f, 0.0f, 0.0f};
	tempProp = createFloat3Property("position", default);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_SOURCE, Lav_3D_POSITION)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_SOURCE].insert(Lav_3D_POSITION);
	}
	
	//distance_model on Lav_OBJTYPE_SOURCE
	{
	tempProp = createIntProperty("distance_model", 0, 0, 0);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_SOURCE, Lav_SOURCE_DISTANCE_MODEL)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_SOURCE].insert(Lav_SOURCE_DISTANCE_MODEL);
	}
	
	//max_distance on Lav_OBJTYPE_SOURCE
	{
	tempProp = createFloatProperty("max_distance", 50.0f, 0.0f, INFINITY);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_SOURCE, Lav_SOURCE_MAX_DISTANCE)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_SOURCE].insert(Lav_SOURCE_MAX_DISTANCE);
	}
	
	//suspended on Lav_OBJTYPE_SOURCE
	{
	tempProp = createIntProperty("suspended", 0, 0, 1);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_SOURCE, Lav_OBJECT_SUSPENDED)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_SOURCE].insert(Lav_OBJECT_SUSPENDED);
	}
	
	//feedback on Lav_OBJTYPE_DELAY
	{
	tempProp = createFloatProperty("feedback", 0.0f, 0.0f, 1.0f);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_DELAY, Lav_DELAY_FEEDBACK)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_DELAY].insert(Lav_DELAY_FEEDBACK);
	}
	
	//delay_max on Lav_OBJTYPE_DELAY
	{
	tempProp = createFloatProperty("delay_max", 1.0f, 0.5f, 5.0f);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_DELAY, Lav_DELAY_DELAY_MAX)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_DELAY].insert(Lav_DELAY_DELAY_MAX);
	}
	
	//delay on Lav_OBJTYPE_DELAY
	{
	tempProp = createFloatProperty("delay", 0.001f, 0.0f, 0.0f);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_DELAY, Lav_DELAY_DELAY)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_DELAY].insert(Lav_DELAY_DELAY);
	}
	
	//interpolation_time on Lav_OBJTYPE_DELAY
	{
	tempProp = createFloatProperty("interpolation_time", 0.001f, 0.001f, INFINITY);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_DELAY, Lav_DELAY_INTERPOLATION_TIME)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_DELAY].insert(Lav_DELAY_INTERPOLATION_TIME);
	}
	
	//suspended on Lav_OBJTYPE_DELAY
	{
	tempProp = createIntProperty("suspended", 0, 0, 1);
	
	
	(*default_property_instances)[std::tuple<int, int>(Lav_OBJTYPE_DELAY, Lav_OBJECT_SUSPENDED)] = *tempProp;
	delete tempProp;
	(*properties_by_object_type)[Lav_OBJTYPE_DELAY].insert(Lav_OBJECT_SUSPENDED);
	}
	
	
	
	tempcall = new LavCallback();
	tempcall->setName("end");
	(*default_callback_instances)[std::tuple<int, int>(Lav_OBJTYPE_FILE, Lav_FILE_END_CALLBACK)] = *tempcall;
	delete tempcall;
	(*callbacks_by_object_type)[Lav_OBJTYPE_FILE].insert(Lav_FILE_END_CALLBACK);
	
}


std::map<int, LavProperty> makePropertyTable(int objtype) {
	auto needed = (*properties_by_object_type)[objtype];
	std::map<int, LavProperty> retval;
	for(auto index: needed) {
		retval[index] = (*default_property_instances)[std::tuple<int, int>(objtype, index)];
	}
	return retval;
}

std::map<int, LavCallback> makeCallbackTable(int objtype) {
	std::map<int, LavCallback> retval;
	std::set<int> needed = (*callbacks_by_object_type)[objtype];
	for(auto index: needed) {
		retval[index] = (*default_callback_instances)[std::tuple<int, int>(objtype, index)];
	}
	return retval;
}